=== "./index.html" ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portal</title>
    <link rel="icon" type="image/png" href="images/Crafto.png">
    <link rel="stylesheet" href="css/styles.css">
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <header>
        <div id="header-content">
            <div id="logo">
                <img src="images/craftech_logo.png" alt="Crafto Logo">
            </div>
            <div id="menu">
                <div id="apps" class="headerItem" onclick="window.location.hash = 'apps';">
                    <img src="images/menu_toolbar.svg" alt="Apps Menu">
                </div>
                <div id="settings" class="headerItem" style="display: none;">
                    <img src="images/gear_toolbar.svg" alt="Settings">
                </div>
                <div id="help" class="headerItem" style="display: none;">
                    <img src="images/help_toolbar.svg" alt="Help">
                </div>
            </div>
            <div id="user-info" >
                <span id="user-name" class="headerItem" style="display: none !important;"></span>
                <img id="user-image" src="images/default-avatar.png" alt="you" class="headerItem" style="display: none; filter: invert(1) !important" >
            </div>
        </div>
    </header>
    
    <div id="content"></div>

    <!-- Archivos JS necesarios para la funcionalidad del frontend -->
    <script src="js/appList.js" defer></script> <!-- Lista de aplicaciones -->
    <script src="js/storageDB.js" defer></script> <!-- Manejo del almacenamiento -->
    <script src="js/appManager.js" defer></script> <!-- Manejo de la aplicación -->
    <script src="js/index.js" defer></script> <!-- Lista de aplicaciones -->
    <script src="js/SessionsManager.js" defer></script> <!-- Manejo de la aplicación -->
    <script src="js/tableManager.js" defer></script> <!-- Manejo de la aplicación -->
</body>
</html>
=== "./css/styles.css" ===
/* Reset básico */
body, h1, h2, h3, p, ul, li, header {
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
}

#content h2 {
    font-size: 1.5rem;
    margin-bottom: 20px !important;
}

/* Estilos generales */
body {
    font-family: Arial, sans-serif !important;
    background-color: #121212 !important;
    color: #e0e0e0 !important;
    line-height: 1.6 !important;
    display: flex !important;
    flex-direction: column !important;
    align-items: center !important;
    padding: 20px !important;
}

/* Estilo del header */
header {
    background-color: #1e1e1e !important;
    color: #e0e0e0 !important;
    padding: 9px 15px !important;
    display: flex !important;
    justify-content: space-between !important;
    align-items: center !important;
    width: 100% !important;
    max-width: 1200px !important;
    border-radius: 8px !important;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1) !important;
}

#header-content {
    display: flex !important;
    justify-content: space-between !important;
    align-items: center !important;
    width: 100% !important;

}


#menu div img {
    filter: invert(1) !important;
}

#logo img {
    height: 40px !important;
}

#menu {
    display: flex !important;
    align-items: center !important;
    gap: 20px !important;
    margin-left: auto !important;
}

#menu div {
    cursor: pointer !important;
    height: auto !important; /* Valor por defecto */
}

#menu img {
    width: 25px !important;
    height: 25px !important;
}

#user-info {
    display: flex !important;
    align-items: center !important;
    position: relative !important;
    gap: 10px !important;
    margin-left: 20px !important;
}

#user-info img {
    border-radius: 50% !important;
    width: 40px !important;
    height: 40px !important;
}

#user-name {
    display: block !important; /* Visible por defecto */
}

/* Estilo del contenedor principal */
#content {
    margin-top: 20px;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    max-width: 1200px;
    background-color: #1e1e1e;
    color: #e0e0e0;
}

/* Estilos para pantallas pequeñas (modo vertical o móviles) */
@media (max-width: 768px) {
    #user-name {
        display: none !important; /* Oculta el nombre del usuario */
    }

    header {
        padding: 3px 10px !important; /* Cambia el padding del header */
    }

    #menu {
        gap: 7px !important;
    }

    #user-info {
        gap: 5px !important;
        margin-left: 7px !important;
    }

    body {
        padding: 10px !important;
    }
}



=== "./js/tableManager.js" ===
class TableManager {
    constructor(tableId, columns, data = [], filters = {}, selectedItems = [], contextMenuOptions = [], defaultSort = null, allowMultipleSelection = true, onItemClick = null) {
        this.tableId = tableId;
        this.columns = columns;
        this.data = data;
        this.filters = filters;
        this.selectedItems = selectedItems;
        this.contextMenuOptions = contextMenuOptions;
        this.defaultSort = defaultSort;
        this.allowMultipleSelection = allowMultipleSelection;
        this.onItemClick = onItemClick; // Función opcional a ejecutar al hacer clic en un ítem
        this.initTable();
        this.loadStoredFilters();

        if (this.defaultSort) {
            this.sortItems(this.defaultSort.columnId, this.defaultSort.order);
        }
    }

    // Inicializa la tabla
    initTable() {
        this.renderTable();
        this.applyFilters();
        this.attachEventListeners();
    }

    // Renderiza la tabla
    renderTable(filteredData = this.data) {
        const table = document.getElementById(this.tableId);
        table.innerHTML = '';

        const thead = document.createElement('thead');
        const headerRow = document.createElement('tr');
        this.columns.forEach(col => {
            const th = document.createElement('th');
            th.textContent = col.name;
            th.dataset.columnId = col.id;
            if (col.sortable) {
                th.classList.add('sortable');
                th.addEventListener('click', () => {
                    this.sortItems(col.id);
                });
            }
            headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);
        table.appendChild(thead);

        const tbody = document.createElement('tbody');
        filteredData.forEach(item => {
            const row = document.createElement('tr');
            row.dataset.itemId = item.id;
            this.columns.forEach(col => {
                const td = document.createElement('td');
                td.textContent = item[col.id];
                row.appendChild(td);
            });
            tbody.appendChild(row);
        });
        table.appendChild(tbody);

        this.updateSelectedUI();
        this.updateSortUI(); // Ensure the sort UI is updated after rendering
    }

    

    // Aplica los filtros a los datos
    applyFilters() {
        const filteredData = this.data.filter(item => {
            return Object.keys(this.filters).every(key => {
                const filterValue = this.filters[key];
                if (!filterValue) return true;
                return item[key].toLowerCase().includes(filterValue.toLowerCase());
            });
        });
        this.renderTable(filteredData);
    }

    // Almacena la configuración de los filtros aplicados
    saveFilters() {
        localStorage.setItem(`${this.tableId}-filters`, JSON.stringify(this.filters));
    }

    // Carga la configuración de filtros almacenada
    loadStoredFilters() {
        const storedFilters = JSON.parse(localStorage.getItem(`${this.tableId}-filters`));
        if (storedFilters) {
            this.filters = storedFilters;
            this.applyFilters();
        }
    }

    // Actualiza la tabla con nuevos datos
    updateData(newData) {
        this.data = newData;
        this.applyFilters();
    }

    // Actualiza los filtros y vuelve a renderizar la tabla
    updateFilters(newFilters) {
        this.filters = { ...this.filters, ...newFilters };
        this.saveFilters();
        this.applyFilters();
    }

    // Método para ordenar los ítems
    sortItems(columnId, order) {
        // Toggle the order if not specified
        if (!order) {
            order = this.currentSortColumn === columnId && this.currentSortOrder === 'asc' ? 'desc' : 'asc';
        }

        this.currentSortColumn = columnId;
        this.currentSortOrder = order;

        this.data.sort((a, b) => {
            const aValue = a[columnId];
            const bValue = b[columnId];

            if (aValue < bValue) return order === 'asc' ? -1 : 1;
            if (aValue > bValue) return order === 'asc' ? 1 : -1;
            return 0;
        });

        this.renderTable();
        this.updateSortUI();
    }

    updateSortUI() {
        const headers = document.querySelectorAll(`#${this.tableId} th`);
        headers.forEach(th => {
            th.classList.remove('sort-asc', 'sort-desc');
            if (th.dataset.columnId === this.currentSortColumn) {
                th.classList.add(`sort-${this.currentSortOrder}`);
            }
        });
    }

    // Maneja la selección de un ítem
    selectItem(itemId) {
        const item = this.data.find(item => item.id === parseInt(itemId, 10));

        if (this.allowMultipleSelection) {
            const itemIndex = this.selectedItems.indexOf(item);
            if (itemIndex > -1) {
                this.selectedItems.splice(itemIndex, 1); // Deseleccionar el ítem si ya estaba seleccionado
            } else {
                this.selectedItems.push(item); // Seleccionar el ítem
            }
        } else {
            if (this.selectedItems.includes(item)) {
                this.selectedItems = []; // Deseleccionar el ítem si ya estaba seleccionado
            } else {
                this.selectedItems = [item]; // Seleccionar el ítem
            }
        }

        this.updateSelectedUI();
    }

    // Actualiza la UI de ítems seleccionados
    updateSelectedUI() {
        const rows = document.querySelectorAll(`#${this.tableId} tbody tr`);
        rows.forEach(row => {
            const itemId = parseInt(row.dataset.itemId, 10);
            if (this.selectedItems.some(item => item.id === itemId)) {
                row.classList.add('selected');
            } else {
                row.classList.remove('selected');
            }
        });
    }

    // Obtiene los ítems seleccionados
    getSelectedItems() {
        return this.selectedItems;
    }

    // Muestra el menú contextual
    showContextMenu(event, itemId) {
        event.preventDefault();

        // Eliminar cualquier menú contextual existente
        const existingMenu = document.querySelector('.context-menu');
        if (existingMenu) {
            existingMenu.remove();
        }

        const contextMenu = document.createElement('div');
        contextMenu.classList.add('context-menu');

        this.contextMenuOptions.forEach(option => {
            const menuItem = document.createElement('div');
            menuItem.classList.add('context-menu-item');
            menuItem.textContent = option.label;
            menuItem.addEventListener('click', () => {
                option.action(itemId);
                contextMenu.remove(); // Eliminar el menú después de hacer clic en una opción
            });
            contextMenu.appendChild(menuItem);
        });

        document.body.appendChild(contextMenu);

        const { clientX: mouseX, clientY: mouseY } = event;
        const { clientWidth: menuWidth, clientHeight: menuHeight } = contextMenu;

        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;

        // Asegurar que el menú no salga de la ventana
        contextMenu.style.top = `${mouseY + menuHeight > windowHeight ? windowHeight - menuHeight : mouseY}px`;
        contextMenu.style.left = `${mouseX + menuWidth > windowWidth ? windowWidth - menuWidth : mouseX}px`;

        // Ocultar el menú al hacer clic en otro lugar
        document.addEventListener('click', () => {
            contextMenu.remove();
        }, { once: true });
    }
    // Añade o quita columnas de la tabla
    updateColumns(newColumns) {
        this.columns = newColumns;
        this.renderTable();
    }

    // Adjunta los event listeners necesarios
    attachEventListeners() {
        const table = document.getElementById(this.tableId);

        // Evento para manejar la selección de ítems
        table.addEventListener('click', event => {
            if (event.target.tagName === 'TD') {
                const row = event.target.parentElement;
                this.selectItem(row.dataset.itemId);
                if (this.onItemClick) {
                    this.onItemClick(row.dataset.itemId); // Ejecuta la función parametrizada
                }
            }
        });

        // Evento para manejar el menú contextual
        table.addEventListener('contextmenu', event => {
            if (this.contextMenuOptions.length > 0) {
                if (event.target.tagName === 'TD') {
                    const row = event.target.parentElement;
                    this.showContextMenu(event, row.dataset.itemId);
                }
            } else {
                event.preventDefault(); // Prevenir el menú contextual por defecto si no hay opciones definidas
            }
        });
    }

    clearSelection() {
        this.selectedItems = [];
        this.updateSelectedUI();
    }
}
=== "./js/storageDB.js" ===
var CLIENT_ID = "654333069607-t118hpn2v2ui383h9fcfpo0aspiv4tva.apps.googleusercontent.com";


class StorageDB {
    constructor(encryptionKey = null) {
        this.encryptionKey = encryptionKey;
        this.storage = localStorage;
    }

    // Establece un valor en la base de datos
    set(key, value) {
        let data = JSON.stringify(value);
        if (this.encryptionKey) {
            data = this.encrypt(data);
        }
        this.storage.setItem(key, data);
    }

    // Obtiene un valor de la base de datos
    get(key) {
        let data = this.storage.getItem(key);
        if (!data) return null; // Si no hay datos, devuelve null

        if (this.encryptionKey) {
            data = this.decrypt(data);
        }
        try {
            return JSON.parse(data);
        } catch (e) {
            console.error(`Error parsing data for key ${key}:`, e);
            this.remove(key); // Remover el valor corrupto del almacenamiento
            return null; // Devolver null si ocurre un error al parsear
        }
    }

    // Elimina un valor de la base de datos
    remove(key) {
        this.storage.removeItem(key);
    }

    // Limpia la base de datos
    clear() {
        this.storage.clear();
    }

    // Método para encriptar datos usando XOR
    encrypt(data) {
        return data.split('').map((char, i) => {
            return String.fromCharCode(char.charCodeAt(0) ^ this.encryptionKey.charCodeAt(i % this.encryptionKey.length));
        }).join('');
    }

    // Método para desencriptar datos usando XOR
    decrypt(data) {
        return this.encrypt(data); // XOR es reversible de la misma manera
    }

    // Decodifica un JWT
    parseJwt(token) {
        try {
            const base64Url = token.split('.')[1];
            const base64 = decodeURIComponent(atob(base64Url).split('').map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));
            return JSON.parse(base64);
        } catch (e) {
            console.error("Error parsing JWT:", e);
            return null;
        }
    }

    // Verifica si un token JWT sigue siendo válido
    isGtokenValid(token) {
        const decoded = this.parseJwt(token);
        if (!decoded) return false; // Si el token no se pudo decodificar, no es válido
        const currentTime = Math.floor(Date.now() / 1000);
        return decoded.exp > currentTime;
    }

    // Verifica si el token de Google ID necesita ser renovado
    checkGtoken() {
        const googleIdToken = this.get('google_id_token');
        return !googleIdToken || !this.isGtokenValid(googleIdToken);
    }
}
=== "./js/index.js" ===
document.addEventListener('DOMContentLoaded', async () => {
    const encryptionKey = 'my-global-secret-key';
    window.appManager = new AppManager(encryptionKey);
    window.sessionManager = new SessionManager(appManager);

    await appManager.initializeApp();

    // Precargar vistas más utilizadas
    appManager.preLoadViews(['apps', 'signin', 'settings']);

    const currentHash = window.location.hash.substring(1);
    if (currentHash) {
        const viewTitle = appManager.getAppNameById(currentHash);
        appManager.loadView(currentHash, viewTitle);
    } else {
        appManager.loadInitialView();
    }

    // Manejar clicks en botones del menú principal
    document.getElementById('apps').addEventListener('click', () => {
        appManager.loadView('apps', 'Apps');
    });

    document.getElementById('settings').addEventListener('click', () => {
        appManager.loadView('settings', 'Settings');
    });

    document.getElementById('help').addEventListener('click', () => {
        appManager.loadView('help', 'Help');
    });
});=== "./js/appManager.js" ===
console.log("Ver: 2.1")

class AppManager {
    constructor(encryptionKey) {
        this.encryptionKey = encryptionKey;
        this.encryptedDB = new StorageDB(encryptionKey);
        this.unencryptedDB = new StorageDB();
        this.sessionManager = new SessionManager(this);
        this.isLoading = false;
    }

    initializeApp() {
        this.sessionManager.initialize();
        this.handleHashChange();
    }

    loadInitialView() {
        if (!this.sessionManager.isSessionActive()) {
            this.loadView('signin', 'Sign In');
        } else {
            this.loadView('apps', 'Apps');
        }
    }

    preLoadViews(viewNames) {
        for (let viewName of viewNames) {
            try {
                fetch(`views/${viewName}/${viewName}.html`);
                const link = document.createElement('link');
                link.rel = 'prefetch';
                link.href = `views/${viewName}/${viewName}.css`;
                document.head.appendChild(link);

                const script = document.createElement('script');
                script.src = `views/${viewName}/${viewName}.js`;
                script.defer = true;
                script.setAttribute('data-view-script', '');
                document.body.appendChild(script);
            } catch (error) {
                console.error(`Error preloading view ${viewName}:`, error);
            }
        }
    }

    loadView(viewName, viewTitle) {
        if (this.isLoading) return;
        this.isLoading = true;

        console.log(`Loading view: ${viewName}`);

        const contentDiv = document.getElementById('content');
        contentDiv.style.opacity = 0;

        this.removePreviousAssets();

        setTimeout(() => {
            fetch(`views/${viewName}/${viewName}.html`)
                .then(response => response.text())
                .then(html => {
                    contentDiv.innerHTML = html;

                    const link = document.createElement('link');
                    link.rel = 'stylesheet';
                    link.href = `views/${viewName}/${viewName}.css`;
                    link.setAttribute('data-view-style', '');
                    document.head.appendChild(link);

                    const script = document.createElement('script');
                    script.src = `views/${viewName}/${viewName}.js`;
                    script.defer = true;
                    script.setAttribute('data-view-script', '');
                    script.onload = () => {
                        if (typeof initializeView === 'function') {
                            initializeView();
                        }
                        this.isLoading = false;
                    };
                    contentDiv.style.opacity = 1;
                    document.body.appendChild(script);

                    document.title = viewTitle;
                })
                .catch(error => {
                    console.error('Error al cargar la vista:', error);
                    this.isLoading = false;
                });
        }, 100);
    }

    removePreviousAssets() {
        const oldLink = document.querySelector('link[data-view-style]');
        if (oldLink) {
            oldLink.remove();
        }

        const oldScripts = document.querySelectorAll('script[data-view-script]');
        oldScripts.forEach(script => script.remove());
    }

    clearAllData() {
        this.encryptedDB.clear();
        this.unencryptedDB.clear();
    }

    handleHashChange() {
        window.addEventListener('hashchange', () => {
            const currentHash = window.location.hash.substring(1);
            if (currentHash && !this.isLoading) {
                const viewTitle = this.getAppNameById(currentHash);
                this.loadView(currentHash, viewTitle);
            }
        });
    }

    getAppNameById(id) {
        const app = window.apps.find(app => app.id === id);
        return app ? app.name : 'Unknown';
    }

    async performAuthenticatedOperation(operation) {
        await this.sessionManager.checkAndPromptAuth();
        const accessToken = await this.sessionManager.getAccessToken();
        if (accessToken) {
            return operation(accessToken);
        } else {
            console.error('Failed to get access token');
            return null;
        }
    }

    async fetchCalendarEvents(calendarId, timeMin, timeMax) {
        return this.performAuthenticatedOperation(async (accessToken) => {
            const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?timeMin=${timeMin}&timeMax=${timeMax}`;
            const response = await fetch(url, {
                headers: {
                    'Authorization': `Bearer ${accessToken}`
                }
            });
            if (!response.ok) {
                throw new Error('Failed to fetch calendar events');
            }
            return response.json();
        });
    }

    async createCalendarEvent(calendarId, event) {
        return this.performAuthenticatedOperation(async (accessToken) => {
            const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(event)
            });
            if (!response.ok) {
                throw new Error('Failed to create calendar event');
            }
            return response.json();
        });
    }
}=== "./js/SessionsManager.js" ===
class SessionManager {
    constructor(appManager) {
        this.appManager = appManager;
        this.authAttempted = false;
    }

    initialize() {
        google.accounts.id.initialize({
            client_id: CLIENT_ID,
            callback: this.handleCredentialResponse.bind(this),
            auto_select: false,
            ux_mode: "popup",
            context: "signin",
        });
    }

    async checkAndPromptAuth() {
        if (await this.isSessionActive()) {
            console.log("Session is active");
        } else {
            this.promptGoogleSignIn();
        }
    }

    promptGoogleSignIn() {
        if (this.authAttempted) return;
        this.authAttempted = true;
        google.accounts.id.prompt();
    }

    async handleCredentialResponse(response) {
        try {
            const idToken = response.credential;
            this.storeIdToken(idToken);

            const accessToken = await this.fetchAccessToken(idToken);
            if (accessToken) {
                this.storeAccessToken(accessToken);
            }

            this.updateUIWithUserProfile();
            this.appManager.loadInitialView();
        } catch (error) {
            console.error('Error handling credential response:', error);
            alert('Failed to authenticate. Please try again.');
        }
    }

    storeIdToken(idToken) {
        this.appManager.encryptedDB.set('google_id_token', idToken);
    }

    storeAccessToken(accessToken) {
        this.appManager.encryptedDB.set('google_access_token', accessToken);
        const expirationTime = Date.now() + 3600000; // Current time + 1 hour in milliseconds
        this.appManager.encryptedDB.set('token_expiration', expirationTime.toString());
    }

    async fetchAccessToken(idToken) {
        try {
            const response = await fetch(`https://oauth2.googleapis.com/tokeninfo?id_token=${idToken}`);
            if (!response.ok) {
                throw new Error('Failed to fetch access token');
            }
            const data = await response.json();
            return data.access_token || null;
        } catch (error) {
            console.error('Error fetching access token:', error);
            return null;
        }
    }

    async isSessionActive() {
        const expirationTime = parseInt(this.appManager.encryptedDB.get('token_expiration') || '0', 10);
        if (Date.now() < expirationTime) {
            const accessToken = this.appManager.encryptedDB.get('google_access_token');
            return !!accessToken && await this.validateAccessToken(accessToken);
        }
        return false;
    }

    async validateAccessToken(accessToken) {
        try {
            const response = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);
            const data = await response.json();
            return !!data && data.expires_in > 0;
        } catch (error) {
            console.error('Failed to validate access token:', error);
            return false;
        }
    }

    async getAccessToken() {
        if (await this.isSessionActive()) {
            return this.appManager.encryptedDB.get('google_access_token');
        }
        await this.checkAndPromptAuth();
        return null;
    }

    getIdToken() {
        return this.appManager.encryptedDB.get('google_id_token');
    }

    clearTokens() {
        this.appManager.encryptedDB.remove('google_id_token');
        this.appManager.encryptedDB.remove('google_access_token');
        this.appManager.encryptedDB.remove('token_expiration');
    }

    logout() {
        const confirmation = confirm("Are you sure you want to log out? You will need to re-authenticate.");
        if (confirmation) {
            this.clearTokens();
            this.appManager.loadView('signin', 'Sign In');
        }
    }

    updateUIWithUserProfile() {
        const idToken = this.getIdToken();
        if (idToken) {
            const profile = this.appManager.encryptedDB.parseJwt(idToken);
            if (profile) {
                document.getElementById('user-name').textContent = profile.name;
                document.getElementById('user-image').src = profile.picture;
                document.getElementById('user-image').style.display = "block";
                document.getElementById('user-name').style.display = "block";
            }
        }
    }
}
=== "./js/appList.js" ===
window.apps = [
    {
        id: 'worklog-manager',
        name: 'Worklog Manager',
        comment: 'Manage your worklogs',
        group: 'public'
    },
    {
        id: 'settings',
        name: 'Settings',
        comment: 'Adjust your Portal settings',
        group: 'public'
    },
    {
        id: 'help',
        name: 'Help',
        comment: 'Find help and documentation',
        group: 'public'
    },
    {
        id: 'apps',
        name: 'Apps',
        comment: 'Select an Application',
        group: 'system'
    },
    {
        id: 'signin',
        name: 'Sign in',
        comment: 'Google one tap login view',
        group: 'home'
    },
    {
        id: 'loading',
        name: 'Loading...',
        comment: 'View shown when a view change (only for system)',
        group: 'system'
    }
];
=== "./views/settings/settings.css" ===
/* Settings View Specific Styles */
#settings-view {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
}

.container {
    min-width: 500px;
    max-width: 800px;
    background-color: #1e1e1e;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 5px 5px 10px 1px rgba(0, 0, 0, 0.3);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
}

#settings-container h2 {
    color: #e0e0e0;
    margin-bottom: 20px;
}

#settings-subcontainer {
    background-color: #333;
    color: #e0e0e0;
    padding: 15px;
    border-radius: 8px;
}

.container a {
    color: grey;
}

.container input {
    width: 100%;
    padding: 0.3rem;
    background-color: #444;
    border: none;
    color: #e0e0e0;
}=== "./views/settings/settings.html" ===
<div class="app settings-view" id="settings-view">
    <h2>Settings</h2>
    <div class="container z-depth-3" id="settings-container">

        <h3>Jira Token</h3>
        <div class="token-input-container">
            <input type="password" id="jira-token-input" placeholder="Insert your Jira token to start">
            <button type="button" id="toggle-jira-token-visibility" class="toggle-visibility"> 👁️ </button>
        </div>
        <button type="submit" id="save-jira-token-btn">Save</button>
        <button type="button" id="delete-jira-token-btn">Delete</button>
        <span id="jira-token-status" class="token-status"></span>
        <a href="https://id.atlassian.com/manage-profile/security/api-tokens" target="_blank">Get your Jira token here</a>
    </div>

    <div class="container z-depth-3">

        <h3>User Data</h3>
        <!-- Logout and Clear Data Buttons -->
        <div class="action-buttons">
            <button type="button" id="logout-btn">Log Out</button>
            <button type="button" id="clear-data-btn">Clear Local Data</button>
        </div>
    </div>

</div>=== "./views/settings/settings.js" ===
function initializeView() {
    const jiraTokenInput = document.getElementById('jira-token-input');
    const saveJiraTokenBtn = document.getElementById('save-jira-token-btn');
    const deleteJiraTokenBtn = document.getElementById('delete-jira-token-btn');
    const toggleJiraTokenVisibility = document.getElementById('toggle-jira-token-visibility');
    const jiraTokenStatus = document.getElementById('jira-token-status');
    const logoutBtn = document.getElementById('logout-btn');
    const clearDataBtn = document.getElementById('clear-data-btn');

    const encryptionKey = 'my-global-secret-key';
    const appManager = new AppManager(encryptionKey);

    // Verificar si el usuario está autenticado
    const idToken = appManager.unencryptedDB.get('google_id_token');
    if (!idToken) {
        alert('You must be logged in to manage tokens.');
        appManager.loadView('signin', 'Sign In');
        return;
    }

    // Mostrar el estado del token de Jira
    if (appManager.encryptedDB.get('jira_token')) {
        jiraTokenStatus.textContent = 'Token stored';
        jiraTokenStatus.style.color = 'green';
    } else {
        jiraTokenStatus.textContent = 'No token stored';
        jiraTokenStatus.style.color = 'red';
    }

    // Guardar el token de Jira
    saveJiraTokenBtn.addEventListener('click', () => {
        const token = jiraTokenInput.value;
        appManager.encryptedDB.set('jira_token', token);
        jiraTokenStatus.textContent = 'Token stored';
        jiraTokenStatus.style.color = 'green';
        alert('Jira token saved successfully.');
    });

    // Eliminar el token de Jira
    deleteJiraTokenBtn.addEventListener('click', () => {
        appManager.encryptedDB.remove('jira_token');
        jiraTokenStatus.textContent = 'No token stored';
        jiraTokenStatus.style.color = 'red';
        alert('Jira token deleted successfully.');
    });

    // Cerrar sesión
    logoutBtn.addEventListener('click', () => {
        sessionManager.logout();
    });

    // Limpiar todos los datos locales
    clearDataBtn.addEventListener('click', () => {
        appManager.clearAllData();
        alert('All data cleared.');
    });

    // Alternar la visibilidad del token de Jira
    toggleJiraTokenVisibility.addEventListener('click', () => {
        if (jiraTokenInput.type === 'password') {
            jiraTokenInput.type = 'text';
            toggleJiraTokenVisibility.textContent = 'Hide';
        } else {
            jiraTokenInput.type = 'password';
            toggleJiraTokenVisibility.textContent = 'Show';
        }
    });
}
=== "./views/loading/loading.css" ===
/* Settings View Specific Styles */
#settings-view {
    display: flex;
    justify-content: center;
    padding: 20px;
}

#settings-container {
    width: 100%;
    max-width: 800px;
    background-color: #1e1e1e;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 5px 5px 10px 1px rgba(0, 0, 0, 0.3);
}

#settings-container h2 {
    color: #e0e0e0;
    margin-bottom: 20px;
}

#settings-subcontainer {
    background-color: #333;
    color: #e0e0e0;
    padding: 15px;
    border-radius: 8px;
}
=== "./views/loading/loading.html" ===
<div class="app settings-view" id="settings-view">
    <h2>Loading...</h2>
</div>
=== "./views/loading/settings.js" ===
function initializeView() {


}



=== "./views/worklog-manager/worklog-manager.html" ===
<div class="app worklog-manager" id="worklog-manager">
    <div class="container z-depth-3" id="container1">
        <div id="filter-issues" class="subContainer z-depth-2">
            <div class="filterRow">
                <label for="project">Project:</label>
                <select id="project" class="browser-default"></select>
            </div>
            <div class="filterRow">
                <label for="assignee">Assignee:</label>
                <select id="assignee" class="browser-default"></select>
            </div>
            <div class="filterRow">
                <label for="searchIssue">Search:</label>
                <input type="text" id="searchIssue" placeholder="Start writing to filter" />
            </div>
            <div class="buttonRow">
                <button id="updateIssues-btn">Update Issues</button>
            </div>
        </div>
        <div class="issues z-depth-2">
            <table id="issuesTable">
                <thead>
                    <tr>
                        <th>Summary</th>
                        <th class="center-text">Spent</th>
                        <th>Link</th>
                        <th class="center-text">Status</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
    <div class="container-group">
        <div class="container z-depth-3" id="container2">
            <div id="filter-events" class="subContainer z-depth-2">
                <div class="calendar-filter-block">
                    <label for="calendar-select">Calendar:</label>
                    <select id="calendar-select" class="browser-default"></select>
                </div>

                <div class="calendar-filter-block">
                    <label for="date-input">Date:</label>
                    <input type="date" id="date-input" />
                </div>

                <div class="buttonRow">
                    <button id="updateEvents-btn">Update Events</button>
                </div>
            </div>
            <div class="events z-depth-2">
                <table id="eventsTable">
                    <thead>
                        <tr>
                            <th>Start Time</th>
                            <th>Title</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
        <div class="container z-depth-3" id="container3">
            <div>
                <input type="text" class="toComment" id="selectedEventComment" placeholder="Comment" />
            </div>
            <div class="buttonRow button-container">
                <button id="syncButton" disabled>Sync</button>
            </div>
        </div>
    </div>
</div>
=== "./views/worklog-manager/worklog-manager.js" ===
function initializeView() {
    const issuesTable = new TableManager(
        'issuesTable',
        [
            { id: 'summary', name: 'Summary', sortable: true },
            { id: 'timeSpent', name: 'Time Spent', sortable: true },
            { id: 'link', name: 'Link', sortable: false },
            { id: 'status', name: 'Status', sortable: true }
        ],
        [], // Data se actualizará dinámicamente
        {}, // Filtros iniciales
        [], // Ítems seleccionados
        [    { label: 'View Details', action: (itemId) => viewDetails(itemId) },
        { label: 'Edit', action: (itemId) => editItem(itemId) },
        { label: 'Delete', action: (itemId) => deleteItem(itemId) }], // Opciones del menú contextual
        { columnId: 'summary', order: 'asc' }, // Orden por defecto
        true, // Selección múltiple no permitida
        handleItemClick // Función a ejecutar al hacer clic en un ítem
    );

    const eventsTable = new TableManager(
        'eventsTable',
        [
            { id: 'startTime', name: 'Start Time', sortable: true },
            { id: 'title', name: 'Title', sortable: true },
            { id: 'duration', name: 'Duration', sortable: false }
        ],
        [], // Data se actualizará dinámicamente
        {}, // Filtros iniciales
        [], // Ítems seleccionados
        [], // Opciones del menú contextual
        { columnId: 'startTime', order: 'asc' }, // Orden por defecto
        false, // Selección múltiple no permitida
        handleItemClick // Función a ejecutar al hacer clic en un ítem
    );

    // Eventos para actualizar issues y eventos
    document.getElementById('updateIssues-btn').addEventListener('click', () => updateIssues(issuesTable));
    document.getElementById('updateEvents-btn').addEventListener('click', () => updateEvents(eventsTable));

    // Evento para manejar la sincronización
    document.getElementById('syncButton').addEventListener('click', syncWorklog);

    // Cargar Issues y Eventos al inicio
    updateIssues(issuesTable);
    updateEvents(eventsTable);

    // Función para manejar el clic en un ítem de la tabla
    function handleItemClick(itemId) {
        checkSyncAvailability();
    }

    // Verifica si los botones de sync deben estar habilitados
    function checkSyncAvailability() {
        const syncButton = document.getElementById('syncButton');
        if (issuesTable.getSelectedItems().length > 0 && eventsTable.getSelectedItems().length > 0) {
            syncButton.disabled = false;
        } else {
            syncButton.disabled = true;
        }
    }

    // Actualiza la lista de issues desde Jira
    function updateIssues(tableManager) {
        const jiraToken = appManager.encryptedDB.get('jira_token');
        // Aquí haces la llamada a la API de Jira para obtener los issues y actualizar la tabla
        // Ejemplo ficticio:
        const issues = [
            { id: 1, summary: 'Issue 1', timeSpent: '2h', link: 'https://jira.example.com/1', status: 'Open' },
            { id: 2, summary: 'Issue 2', timeSpent: '1h', link: 'https://jira.example.com/2', status: 'In Progress' }
        ];
        tableManager.updateData(issues);
    }

    // Actualiza la lista de eventos desde Google Calendar
    function updateEvents(tableManager) {
        const calendarId = document.getElementById('calendar-select').value;
        const date = document.getElementById('date-input').value;
        const accessToken = appManager.unencryptedDB.get('access_token');

        // Aquí haces la llamada a la API de Google Calendar para obtener los eventos y actualizar la tabla
        // Ejemplo ficticio:
        const events = [
            { id: 1, startTime: '09:00 AM', title: 'Event 1', duration: '1h' },
            { id: 2, startTime: '11:00 AM', title: 'Event 2', duration: '2h' }
        ];
        tableManager.updateData(events);
    }

    // Sincroniza el worklog de Jira con los eventos de Calendar
    function syncWorklog() {
        const selectedIssue = issuesTable.getSelectedItems()[0];
        const selectedEvent = eventsTable.getSelectedItems()[0];
        const comment = document.getElementById('selectedEventComment').value;

        // Aquí haces la llamada para sincronizar el worklog en Jira usando los datos seleccionados
        console.log('Sincronizando:', selectedIssue, selectedEvent, comment);

        // Deshabilitar el botón de sync durante la sincronización
        document.getElementById('syncButton').disabled = true;

        // Simulación de la sincronización y reactivación del botón
        setTimeout(() => {
            document.getElementById('syncButton').disabled = false;
            alert('Worklog sincronizado con éxito');

            // Deseleccionar los ítems después de sincronizar
            issuesTable.clearSelection();
            eventsTable.clearSelection();
            document.getElementById('selectedEventComment').value = '';
        }, 2000);
    }
}
=== "./views/worklog-manager/worklog-manager.css" ===
/* Worklog Manager Specific Styles */
#worklog-manager {
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
    flex-direction: row;
}

tr.selected {
    background-color: #722424; /* Cambia este color según tu preferencia */
    color: #fff; /* Texto blanco para mayor contraste */
}
tr.selected:hover {
    background-color: #420b0b; /* Mismo color que la selección */
    color: #fff; /* Color de texto que contraste */
}


td {
    font-size: 0.9rem;
}

label {
    font-size: 0.8rem;
    flex: 0.3;
}

select, input {
    padding: 0.3rem;
    background-color: #444;
    border: none;
    color: #e0e0e0;
    flex: 1;
}

.buttonRow {
    display: flex;
    justify-content: flex-end;
}

#content {
    margin-top: 20px;
    padding: 0px;
    border-radius: 0px;
    box-shadow: none;
    width: 100%;
    max-width: 1200px;
    box-shadow: none;
    background-color: transparent !important;
}

.container {
    background-color: #1e1e1e;
    padding: 15px;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    box-shadow: 5px 5px 10px 1px rgba(0, 0, 0, 0.3);
}

.subContainer {
    padding: 10px;
    margin-bottom: 15px;
    border-radius: 8px;
    box-shadow: 2px 3px 20px 4px rgba(0, 0, 0, 0.3)
}

.container-group {
    display: flex;
    flex-direction: column;
    gap: 20px;
    flex: 1;
}

.issues,
.events {
    flex: 1;
    overflow-y: auto;
    border-radius: 8px;
}

#issuesTable,
#eventsTable {
    width: 100%;
    border-collapse: collapse;
}

#eventsTable {
    border-radius: 8px;
}

#issuesTable th,
#eventsTable th,
#issuesTable td,
#eventsTable td {
    padding: 0.3rem;
    border-bottom: 1px solid #333;
}

th {
    background-color: #333;
    color: #e0e0e0;
    text-align: left;
}

td {
    color: #b3b3b3;
}

tr:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

tr {
    height: 25px;
}

.center-text {
    text-align: center;
}

.filterRow,
.calendar-filter-block {
    margin-bottom: 10px;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
}

button {
    padding: 0.3rem 20px;
    background-color: #007bff;
    color: white;
    border-radius: 5px;
    border: none;
    cursor: pointer;
}

.button-container {
    margin-top: 22px;
}

button:hover {
    background-color: #0056b3;
}

button:disabled {
    background-color: #444;
    cursor: not-allowed;
}

#selectedEventComment {
    width: calc(100% - 14px);
}

@media (max-width: 768px) {
    td {
        font-size: 0.9rem;
    }

    #worklog-manager {
        display: flex;
        column-gap: 10px;
        row-gap: 15px;
        flex-wrap: wrap;
        flex-direction: column;
    }
    .container-group {
        column-gap: 10px;
        row-gap: 15px;
    }
}

@media (max-width: 450px) {
    td {
        font-size: 0.8rem;
    }
    th {
        font-size: 0.9rem;
    }
}



/* menu contextual
/* Estilo básico del menú contextual */
.context-menu {
    position: absolute;
    background-color: #2c2c2c;
    border: 1px solid #555;
    border-radius: 5px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
    z-index: 1000;
    padding: 5px 0;
    width: 200px;
}

/* Estilo para los elementos del menú */
.context-menu-item {
    padding: 10px 15px;
    cursor: pointer;
    color: #ddd;
    font-size: 14px;
}

/* Efecto hover para los elementos del menú */
.context-menu-item:hover {
    background-color: #007bff;
    color: #fff;
}

/* Estilo para separar los elementos */
.context-menu-item + .context-menu-item {
    border-top: 1px solid #444;
}




/* Estilo para Ordenamiento tabla */
th.sortable {
    cursor: pointer;
}

th.sort-asc::after {

    /* content: ' ▲'; /* You can customize this arrow */
}

th.sort-desc::after {
    /* content: ' ▼'; /* You can customize this arrow */
}=== "./views/signin/signin.js" ===
function initializeView() {
    const googleIdToken = sessionManager.getIdToken();
    const googleAccessToken = sessionManager.getAccessToken();

    if (googleIdToken && appManager.unencryptedDB.isGtokenValid(googleIdToken) &&
        googleAccessToken && sessionManager.validateAccessToken(googleAccessToken)) {

        const profile = appManager.unencryptedDB.get('user_profile');

        // Mostrar mensaje de que ya está autenticado
        document.getElementById('signInMessage').textContent = `You are already signed in as ${profile.name}.`;

        // Calcular y mostrar la fecha de expiración del token en la consola
        const decodedToken = appManager.unencryptedDB.parseJwt(googleIdToken);
        const expirationDate = new Date(decodedToken.exp * 1000);
        console.log(`Token expires at: ${expirationDate}`);

        // Ocultar el botón de iniciar sesión
        document.getElementById('signInButton').style.display = 'none';
    } else {
        // Renderizar el botón de Google Sign-In si no está autenticado
        google.accounts.id.renderButton(
            document.getElementById("signInButton"),
            { theme: "outline", size: "large", text: "signin", shape: "pill" }
        );

        google.accounts.id.prompt(); // Opcional: solicitar inicio de sesión automático
    }
}
=== "./views/signin/signin.css" ===
.asd{
    color: blue;
}

#content{
    display: flex;
    flex-direction: column;
    align-items: center;
}=== "./views/signin/signin.html" ===
<body>
    <h2>Sign in with Google</h2>

    <!-- Mensaje de autenticación -->
    <div id="signInMessage"></div>

    <!-- Botón de Google Sign-In -->
    <div id="signInButton"></div>
</body>

</html>
=== "./views/apps/apps.js" ===
function initializeView() {
  const appListContainer = document.getElementById('apps-list');
  const apps = window.apps.filter(app => app.group !== 'system');

  apps.forEach(app => {
      const appItem = document.createElement('div');
      appItem.className = 'app-item';
      appItem.onclick = () => {
          appManager.loadView(app.id, app.name);
      };

      const appTitle = document.createElement('h3');
      appTitle.textContent = app.name;

      const appDescription = document.createElement('p');
      appDescription.textContent = app.comment;

      appItem.appendChild(appTitle);
      appItem.appendChild(appDescription);
      appListContainer.appendChild(appItem);
  });
}
=== "./views/apps/apps.html" ===
<div class="container z-depth-3 apps-list" id="apps-list">
    <!-- Aquí se renderizarán dinámicamente las aplicaciones -->
</div>=== "./views/apps/apps.css" ===
#apps-list {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
}

.app-item {
    background-color: #333;
    color: #e0e0e0;
    padding: 20px;
    border-radius: 8px;
    cursor: pointer;
    flex: 1 1 calc(33.333% - 20px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    text-align: center;
}

.app-item h3 {
    margin: 0 0 10px;
    font-size: 18px;
}

.app-item p {
    margin: 0;
    font-size: 14px;
}

#content {
    margin-right: 20px;
    margin-left: 20px;
}

@media (max-width: 768px) {
    #apps-list {
        flex-direction: column;
    }
}



s
/* Estilo para el contenedor de la lista de aplicaciones */
#app-list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

/* Estilo para cada tarjeta (card) de la aplicación */
.app-item {
    background-color: #1e1e1e;
    color: #e0e0e0;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.6);
    text-align: center;
    transition: transform 0.2s, box-shadow 0.2s;
}

.app-item h3 {
    margin-bottom: 10px;
    font-size: 1.5rem;
    color: #4285f4;
}

.app-item p {
    color: #b3b3b3;
}

.app-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.7);
    cursor: pointer;
}
=== "./views/help/help.html" ===
<div class="app help-view" id="help-view">
    <div class="container z-depth-3" id="help-container">
        <h2>Help</h2>
        <div class="sub-container" id="help-subcontainer">
            <p>Welcome to the help section. Here you will find guidance and documentation.</p>
        </div>
    </div>
</div>=== "./views/help/help.js" ===
function initializeView() {


}



=== "./views/help/help.css" ===
/* Help View Specific Styles */
#help-view {
    display: flex;
    justify-content: center;
    padding: 20px;
}

#help-container {
    width: 100%;
    max-width: 800px;
    background-color: #1e1e1e;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 5px 5px 10px 1px rgba(0, 0, 0, 0.3);
}

#help-container h2 {
    color: #e0e0e0;
    margin-bottom: 20px;
}

#help-subcontainer {
    background-color: #333;
    color: #e0e0e0;
    padding: 15px;
    border-radius: 8px;
}
